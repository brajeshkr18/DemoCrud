@model PagedList.IPagedList<TMS.Model.TrackTrip.TrackTripViewModel>
@{
    ViewBag.Title = "TripTrack";
    Layout = "~/Views/Shared/_LayoutOLD.cshtml";
}
<style>
    .container {
        max-width: 980px;
        text-align: center;
        margin: 20px auto;
    }

    h1 {
        margin-bottom: 20px;
    }

    #geocoding_form {
        margin: 40px auto 40px;
    }

    .input-group {
        margin-left: 4%;
    }

    .find-me.btn:focus {
        border-color: transparent;
        outline: 0;
    }

    .coordinates {
        font-size: 18px;
        opacity: 0;
        margin-bottom: 40px;
    }

    .no-browser-support {
        font-size: 18px;
        opacity: 0;
    }

    .coordinates b:first-child {
        margin-right: 15px;
    }

    .visible {
        opacity: 1;
    }

    .map-overlay {
        max-width: 600px;
        height: 400px;
        margin: 0 auto;
        background-color: #fff;
        position: relative;
        border-radius: 2px;
    }

    .btn-overlay {
        max-width: 600px;
        margin-left: 286px !important;
        position: relative;
        border-radius: 2px;
    }

    #map {
        max-width: 550px;
        height: 400px;
        margin: 0 auto;
    }
</style>

<body onload="initMap()">
    <div class="container">

        <h2>Trip Track</h2>



        <p class="no-browser-support">Sorry, the Geolocation API isn't supported in Your browser.</p>
        <p class="coordinates">Latitude: <b class="latitude">42</b> Longitude: <b class="longitude">32</b></p>
        <form id="geocoding_form" class="form-horizontal btn-overlay">
            <div class="form-group">
                <div class="col-xs-12 col-md-6 col-md-offset-3">
                    <button type="button" class="find-me btn btn-info btn-block">Start</button>
                </div>
            </div>
        </form>
        <div class="map-overlay">

            <div id="map"></div>
        </div>
        <form id="geocoding_form" class="form-horizontal btn-overlay">
            <div class="form-group">
                <div class="col-xs-12 col-md-6 col-md-offset-3">
                    <button type="button" class="btn-route btn btn-info btn-block">Complete</button>
                </div>
            </div>
        </form>
    </div>
</body>
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWGwLcpn0gyOWRicmVrENPTXV91J9gJxU&libraries=places"></script>
<script>
        var mapobject = [];
        var MapPoints = []
        var findMeButton = $('.find-me');
        var findRouteButton = $('.btn-route');
        var isStart = 1;
        // Check if the browser has support for the Geolocation API

        findMeButton.on('click', function (e) {

            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function (position) {

                });
            } else {
                console.log("Browser doesn't support geolocation!");
            }
            //isStart=1;

            if (isStart) {
                $(".find-me").html("Stop")
                isStart = 0
                btnclick(!isStart)
            }
            else {
                $(".find-me").html("Start")
                isStart = 1
                btnclick(!isStart)
            }
        });
        findRouteButton.on('click', function (e) {
            drawRoute();
        });
        function btnclick() {

            geocoder = new google.maps.Geocoder();

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
            }
            //Get the latitude and the longitude;
            function successFunction(position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;
                codeLatLng(lat, lng)
            }

            function errorFunction() {
                alert("Geocoder failed");
            }



            function codeLatLng(lat, lng) {
                var currentloc = ""
                var latlng = new google.maps.LatLng(lat, lng);

                geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        console.log(results)
                        if (results[1]) {
                            //formatted address
                            currentloc = results[0].formatted_address;
                            var data = { lat: latlng.lat, lng: latlng.lng, address: currentloc, isStart: isStart }
                            mapobject.push(data);
                            //alert(results[0].formatted_address)
                            //find country name
                            for (var i = 0; i < results[0].address_components.length; i++) {
                                for (var b = 0; b < results[0].address_components[i].types.length; b++) {

                                    //there are different types that might hold a city admin_area_lvl_1 usually does in come cases looking for sublocality type will be more appropriate
                                    if (results[0].address_components[i].types[b] == "administrative_area_level_1") {
                                        //this is the object you are looking for
                                        city = results[0].address_components[i];
                                        break;
                                    }
                                }
                            }

                            //alert(city.short_name + " " + city.long_name)


                        } else {
                            alert("No results found");
                        }
                    } else {
                        alert("Geocoder failed due to: " + status);
                    }
                    infoWindow = new google.maps.InfoWindow({ map: map });
                    var pos = { lat: lat, lng: lng };
                    infoWindow.setPosition(pos);
                  //  infoWindow.setContent("Found your location <br /> : " + currentloc);
                    infoWindow.setContent(currentloc);
                    map.panTo(pos);
                    //var loc = {};
                    //var geocoder = new google.maps.Geocoder();
                    //if (google.loader.ClientLocation) {
                    //    loc.lat = google.loader.ClientLocation.latitude;
                    //    loc.lng = google.loader.ClientLocation.longitude;

                    //    var latlng = new google.maps.LatLng(loc.lat, loc.lng);
                    //    geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                    //        if (status == google.maps.GeocoderStatus.OK) {
                    //            alert(results[0]['formatted_address']);
                    //        };
                    //    });
                    //}
                });
            }
        }
        function rep(MapPoints, replace) {
            var replaceString = this;
            var regex;
            for (var i = 0; i < find.length; i++) {
                regex = new RegExp(find[i], "g");
                replaceString = replaceString.replace(regex, replace[i]);
            }
            return replaceString;
        };
        function drawRoute() {

            debugger;

            $.each(mapobject, function (key, val) {

                var MapPoi = {
                    address: '' + mapobject[key].address + '',
                    lat: '' + mapobject[key].lat() + '',
                    lng: '' + mapobject[key].lng() + '',
                    title: '' + mapobject[key].address + ''
                   , time: new Date().toUTCString(),
                    tripid: 101,
                    drivername:"Test Driver"
                };

                MapPoints.push(MapPoi);
            });

            var locations = MapPoints
            // var locations = jQuery.parseJSON(MapPoints);

            window.map = new google.maps.Map(document.getElementById('map'), {
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                scrollwheel: false
            });

            var infowindow = new google.maps.InfoWindow();
            var flightPlanCoordinates = [];
            var bounds = new google.maps.LatLngBounds();

            for (i = 0; i < locations.length; i++) {
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i].lat, locations[i].lng),
                    map: map
                });
                flightPlanCoordinates.push(marker.getPosition());
                bounds.extend(marker.position);

                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infowindow.setContent(locations[i]['title']);
                        infowindow.open(map, marker);
                    }
                })(marker, i));
            }

            map.fitBounds(bounds);

            var flightPath = new google.maps.Polyline({
                map: map,
                path: flightPlanCoordinates,
                strokeColor: "#FF0000",
                strokeOpacity: 1.0,
                strokeWeight: 2
            });
            postdata()
        }
        function postdata() {
            debugger;
            //var MapPoint = new Array();

            //MapPoint.push(MapPoints);
            $.ajax(
               {
                   type: "POST", //HTTP POST Method
                   url: "../../Dashboard/TripTrack", // Controller/View
                   data: {
                       TripStops: MapPoints
                   }

               });
        }
</script>
<script type="text/javascript">
        var map;
        function initMap() {
            var mapCenter = new google.maps.LatLng(47.6145, -122.3418); //Google map Coordinates
            map = new google.maps.Map($("#map")[0], {
                center: mapCenter,
                zoom: 8
            });
        }


</script>

